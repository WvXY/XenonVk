name: CMake Build on Win & Linux

on:
  push:
    branches: [ "master", "ci-fix" ]
  pull_request:
    branches: [ "master" ]

env:
  # Set the desired build type (Release, Debug, etc.)
  BUILD_TYPE: Release

jobs:
  win:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # https://github.com/TheMrMilchmann/setup-msvc-dev
      - name: Setup MSVC
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      # https://github.com/humbletim/setup-vulkan-sdk
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: 1.4.304.1
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Verify Vulkan SDK contents
        # List the contents of the Vulkan SDK Bin directory to ensure glslangValidator.exe is present.
        run: |
          echo "Listing Vulkan SDK Bin directory:"
          ls "$VULKAN_SDK/Bin"

      - name: Add Vulkan SDK Bin to PATH
        run: |
          echo "VULKAN_SDK is $VULKAN_SDK"
          echo "${VULKAN_SDK}\\Bin" >> $GITHUB_PATH

      - name: Configure CMake
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

  ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vulkan SDK
        run: |
          sudo apt update
          sudo apt install -y libvulkan-dev vulkan-tools glslang-tools

      - name: Configure CMake & auto-install dependencies
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
#            -DGLFW_BUILD_WAYLAND=ON \
#            -DGLFW_BUILD_X11=ON

#      - name: Build
#        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Build
        run: ./build.sh

#      - name: Test
#        working-directory: build
#        run: ctest -C ${{ env.BUILD_TYPE }}
